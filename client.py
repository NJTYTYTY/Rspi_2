import cv2
import requests
import time
import threading
from datetime import datetime
import RPi.GPIO as GPIO
import os

# === CONFIG ===
POND_ID = 1  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ pond_id ‡∏ï‡∏≤‡∏°‡∏ö‡πà‡∏≠
BACKEND_URL = "https://railwayreal555-production-5be4.up.railway.app/process"
CLOUD_API_URL = "https://rspi1-production.up.railway.app"  # URL ‡∏Ç‡∏≠‡∏á cloud app
JOB_CHECK_INTERVAL = 1  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
REGULAR_CAPTURE_INTERVAL = 10  # ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏° format ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö backend
def timestamp_now():
    return datetime.now().strftime("%Y%m%d_%H%M%S")

# === SETUP GPIO ===
relay_pin = 26
GPIO.setmode(GPIO.BCM)
GPIO.setup(relay_pin, GPIO.OUT)

# === SETUP DIRECTORIES ===
BASE_DIR = "/home/iq/control"
IMAGE_DIR = os.path.join(BASE_DIR, "image")
os.makedirs(IMAGE_DIR, exist_ok=True)

# === THREAD SAFETY ===
camera_lock = threading.Lock()  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
gpio_lock = threading.Lock()   # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ GPIO ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô

# === CAMERA SETUP ===
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
    exit()

# === CLOUD API FUNCTIONS ===
def check_for_job():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å cloud ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    try:
        response = requests.get(f"{CLOUD_API_URL}/job-rspi2/{POND_ID}", timeout=5)
        if response.status_code == 200:
            data = response.json()
            return data.get("has_job", False), data.get("job_data")
        else:
            print(f"‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {response.status_code}")
            return False, None
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ cloud: {e}")
        return False, None

def complete_job(result_data):
    """‡πÅ‡∏à‡πâ‡∏á cloud ‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß"""
    try:
        response = requests.post(
            f"{CLOUD_API_URL}/job-rspi2/{POND_ID}/complete",
            json=result_data,
            timeout=5
        )
        if response.status_code == 200:
            print("‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            return True
        else:
            print(f"‚ùå ‡πÅ‡∏à‡πâ‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏à‡πâ‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à: {e}")
        return False

# === CAPTURE FUNCTIONS ===
def capture_images(job_type="regular"):
    """‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ backend (Thread Safe)"""
    print(f"üì∑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ ({job_type})...")
    
    # ‡πÉ‡∏ä‡πâ Lock ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    with camera_lock:
        print(f"üîí ‡πÑ‡∏î‡πâ Lock ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ ({job_type})")
        
        try:
            # ‡πÉ‡∏ä‡πâ GPIO Lock ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÑ‡∏ü‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
            with gpio_lock:
                GPIO.output(relay_pin, GPIO.LOW)
                print(f"üí° ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü LED ({job_type})")
            
            time.sleep(5)
            
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
            ret, frame = cap.read()
            time.sleep(5)
            
            if not ret:
                print("‚ùå ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                with gpio_lock:
                    GPIO.output(relay_pin, GPIO.HIGH)
                return False
                
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á
            cap.set(cv2.CAP_PROP_AUTO_EXPOSURE, 0.25)
            cap.set(cv2.CAP_PROP_EXPOSURE, -6)

            ts = timestamp_now()

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå 2 ‡πÅ‡∏ö‡∏ö
            float_name = f"shrimp_float_pond{POND_ID}_{ts}.jpg"
            water_name = f"water_pond{POND_ID}_{ts}.jpg"
            
            float_path = os.path.join(IMAGE_DIR, float_name)
            water_path = os.path.join(IMAGE_DIR, water_name)

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û
            cv2.imwrite(float_path, frame)
            cv2.imwrite(water_path, frame)
            
            # ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü LED
            with gpio_lock:
                GPIO.output(relay_pin, GPIO.HIGH)
                print(f"üí° ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü LED ({job_type})")

            # ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏õ API
            success_count = 0
            for fname in [float_path, water_path]:
                with open(fname, "rb") as f:
                    files = {"files": (os.path.basename(fname), f, "image/jpeg")}
                    try:
                        response = requests.post(BACKEND_URL, files=files)
                        if response.status_code == 200:
                            print(f"‚úÖ ‡∏™‡πà‡∏á {fname} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ({job_type})")
                            os.remove(fname)
                            success_count += 1
                        else:
                            print(f"‚ùå ‡∏™‡πà‡∏á {fname} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ({job_type}):", response.status_code, response.text)
                    except Exception as e:
                        print(f"‚ùå Error ‡∏™‡πà‡∏á {fname} ({job_type}):", e)
            
            print(f"üì§ ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏£‡πá‡∏à ({success_count}/2 ‡πÑ‡∏ü‡∏•‡πå) - {job_type}")
            return success_count > 0
            
        except Exception as e:
            print(f"üî• Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ ({job_type}): {e}")
            with gpio_lock:
                GPIO.output(relay_pin, GPIO.HIGH)
            return False
        finally:
            print(f"üîì ‡∏õ‡∏•‡πà‡∏≠‡∏¢ Lock ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ ({job_type})")

def execute_job_capture(job_data=None):
    """‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å cloud"""
    print(f"üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô: {job_data}")
    
    # ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ
    success = capture_images("job")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    result_data = {
        "status": "success" if success else "error",
        "pond_id": POND_ID,
        "action": "cam_side",
        "timestamp": datetime.now().isoformat(),
        "job_data": job_data,
        "capture_success": success
    }
    
    # ‡πÅ‡∏à‡πâ‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
    complete_job(result_data)
    
    return result_data

# === THREAD FUNCTIONS ===
def job_checker_thread():
    """Thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å cloud"""
    print("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å cloud...")
    
    while True:
        try:
            has_job, job_data = check_for_job()
            
            if has_job:
                print(f"üìã ‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà: {job_data}")
                execute_job_capture(job_data)
                print("‚úÖ ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏£‡∏≠‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà...")
            else:
                print("üò¥ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å cloud ‡∏£‡∏≠...")
            
            time.sleep(JOB_CHECK_INTERVAL)
            
        except Exception as e:
            print(f"üî• Error ‡πÉ‡∏ô job checker: {e}")
            time.sleep(JOB_CHECK_INTERVAL)

def regular_capture_thread():
    """Thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"""
    print("üì∑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
    
    while True:
        try:
            capture_images("regular")
            time.sleep(REGULAR_CAPTURE_INTERVAL)
            
        except Exception as e:
            print(f"üî• Error ‡πÉ‡∏ô regular capture: {e}")
            time.sleep(REGULAR_CAPTURE_INTERVAL)

# === MAIN ===
if __name__ == "__main__":
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° RSPI2 Client")
    print(f"üåê Cloud API: {CLOUD_API_URL}")
    print(f"üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å {JOB_CHECK_INTERVAL} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    print(f"üì∑ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å {REGULAR_CAPTURE_INTERVAL} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    
    try:
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° thread ‡∏ó‡∏±‡πâ‡∏á 2 ‡∏ï‡∏±‡∏ß
        job_thread = threading.Thread(target=job_checker_thread, daemon=True)
        capture_thread = threading.Thread(target=regular_capture_thread, daemon=True)
        
        job_thread.start()
        capture_thread.start()
        
        print("‚úÖ Thread ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
        
        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ thread ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        while True:
            time.sleep(1)
            
    except KeyboardInterrupt:
        print("üõë ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    except Exception as e:
        print(f"üî• ERROR: {e}")
    finally:
        cap.release()
        GPIO.cleanup()
        print("üîö ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÅ‡∏•‡πâ‡∏ß")
